rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function authed() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return authed() && request.auth.uid == uid;
    }

    // Helper: only the given keys changed
    function changedOnly(keys) {
      return request.resource.data.diff(resource.data).changedKeys().hasOnly(keys);
    }

    // Helper: the current user is being added or removed from an array field
    function toggleOwnId(field) {
      return changedOnly([field]) && (
        // add self
        (
          request.resource.data[field].size() == resource.data[field].size() + 1 &&
          request.resource.data[field].hasAll(resource.data[field]) &&
          (request.auth.uid in request.resource.data[field]) &&
          !(request.auth.uid in resource.data[field])
        )
        ||
        // remove self
        (
          request.resource.data[field].size() + 1 == resource.data[field].size() &&
          resource.data[field].hasAll(request.resource.data[field]) &&
          !(request.auth.uid in request.resource.data[field]) &&
          (request.auth.uid in resource.data[field])
        )
      );
    }

    /* -------- Root of app data -------- */
    match /artifacts/{appId}/public/data {

      /* -------- Users (one rule block; no duplicates) -------- */
      match /users/{userId} {
        // Profiles readable by anyone (adjust to false if you want private profiles)
        allow read: if true;

        // Create/update/delete: owner
        allow create: if authed() && request.auth.uid == userId;
        allow update: if authed() && (
          // Owner can update their profile
          request.auth.uid == userId
          // Non-owners may only add/remove their own UID to the target user's 'followers'
          || toggleOwnId('followers')
        );
        allow delete: if isOwner(userId);
      }

      /* -------- Posts -------- */
      match /posts/{postId} {
        allow read: if true;
        allow create: if authed();

        // Author can edit; any user may only toggle their own like/share
        allow update: if authed() && (
          resource.data.authorId == request.auth.uid
          || toggleOwnId('likes')
          || toggleOwnId('shares')
        );

        allow delete: if authed() && resource.data.authorId == request.auth.uid;

        match /comments/{commentId} {
          allow read: if true;
          allow create: if authed();
          allow update: if authed() && resource.data.authorId == request.auth.uid;
          allow delete: if authed() && (
            resource.data.authorId == request.auth.uid
            || get(/databases/$(database)/documents/artifacts/$(appId)/public/data/posts/$(postId)).data.authorId == request.auth.uid
          );
        }
      }

      /* -------- Chats (members only) -------- */
      match /chats/{chatId} {
        // Anyone signed in can create a chat; document should include 'participants' array
        allow create: if authed();

        // Only members can read/update/delete the chat doc
        allow read, update, delete: if authed() && (request.auth.uid in resource.data.participants);

        match /messages/{messageId} {
          // Only members can read/send messages
          allow read, create: if authed() && (request.auth.uid in get(/databases/$(database)/documents/artifacts/$(appId)/public/data/chats/$(chatId)).data.participants);

          // Only author can edit/delete their own message
          allow update, delete: if authed() && request.auth.uid == resource.data.authorId;
        }
      }

      /* -------- Stories -------- */
      match /stories/{userId} {
        allow read:   if authed();
        allow create: if isOwner(userId);
        allow delete: if isOwner(userId);

        // Owner can edit; viewers may only add themselves exactly once to 'viewedBy'
        allow update: if authed() && (
          request.auth.uid == userId
          ||
          (
            changedOnly(['viewedBy']) &&
            request.resource.data.viewedBy.size() == resource.data.viewedBy.size() + 1 &&
            request.resource.data.viewedBy.hasAll(resource.data.viewedBy) &&
            (request.auth.uid in request.resource.data.viewedBy) &&
            !(request.auth.uid in resource.data.viewedBy)
          )
        );

        match /slides/{slideId} {
          allow read:   if authed();
          allow create: if isOwner(userId);
          allow delete: if isOwner(userId);
          allow update: if authed() && (
            request.auth.uid == userId
            ||
            (
              changedOnly(['viewers']) &&
              request.resource.data.viewers.size() == resource.data.viewers.size() + 1 &&
              request.resource.data.viewers.hasAll(resource.data.viewers) &&
              (request.auth.uid in request.resource.data.viewers) &&
              !(request.auth.uid in resource.data.viewers)
            )
          );
        }
      }

      /* -------- Events -------- */
      match /events/{eventId} {
        allow read: if true;
        // Keep broad create/update/delete for now; consider owner-only later
        allow create, update, delete: if authed();

        match /comments/{commentId} {
          allow read: if true;
          allow create: if authed();
        }
      }

      /* -------- Notifications -------- */
      match /users/{userId}/notifications/{notificationId} {
        allow read, update, delete: if isOwner(userId);
        allow create: if authed();
      }
    }
  }
}
