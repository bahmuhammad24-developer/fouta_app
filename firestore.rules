rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Public data root seen in console: artifacts/{app}/public/data/*
    match /artifacts/{app}/public/data/{document=**} {
      allow read: if true; // public read for posts/stories that are published
      allow write: if request.auth != null && request.resource.data.keys().hasOnly(['title','content','media','createdAt','createdBy','visibility','timestamp','authorId','mediaType','userId'])
                   && request.resource.data.createdBy == request.auth.uid;
    }

    // Core collections referenced in UI and indexes (from screenshots):
    // posts (owned content)
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null
        && request.resource.data.authorId == request.auth.uid
        && request.resource.data.timestamp is timestamp;
      allow update, delete: if request.auth != null
        && resource.data.authorId == request.auth.uid;
    }

    // chats (per-conversation participants)
    match /chats/{chatId} {
      function isParticipant() {
        return request.auth != null
          && (request.auth.uid in resource.data.participants);
      }
      allow read, update, delete: if isParticipant();
      allow create: if request.auth != null
        && request.resource.data.participants is list
        && request.auth.uid in request.resource.data.participants;
    }

    // stories (public read, owner write)
    match /stories/{storyId} {
      allow read: if true;
      allow write: if request.auth != null
        && (request.resource.data.authorId == request.auth.uid
            || resource.data.authorId == request.auth.uid);
    }

    // users (profile docs)
    match /users/{uid} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == uid;
    }

    // Fallback deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
